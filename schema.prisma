datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id                  String                @id
  sessions            Session[]
  github_id           Int                   @unique
  name                String
  username            String
  email               String
  admin               Boolean               @default(false)
  avatar              String
  access_token        String?               @db.Text
  RepositoryStatus    RepositoryStatus[]
  Repository          Repository[]
  PullRequestStatus   PullRequestStatus[]
  DigitalRewardClaim  DigitalRewardClaim[]
  PhysicalRewardClaim PhysicalRewardClaim[]

  @@unique([id])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([id])
}

model Sponsor {
  id                  String                @id @default(cuid())
  name                String
  summary             String                @db.Text
  image_url           String
  SponsoredRepository SponsoredRepository[]
  links               SponsorLinks[]
  Reward              Reward[]

  @@unique([id])
}

model SponsorLinks {
  id         String  @id @default(cuid())
  sponsor_id String
  name       String
  value      String
  sponsor    Sponsor @relation(references: [id], fields: [sponsor_id], onDelete: Cascade)

  @@unique([id])
}

model Repository {
  id                  String               @id @default(cuid())
  repository_id       String               @unique
  submitter           String?
  SponsoredRepository SponsoredRepository?
  cache               RepositoryCache?
  RepositoryStatus    RepositoryStatus?
  user                User?                @relation(fields: [submitter], references: [id], onDelete: Cascade)
  PullRequest         PullRequest[]
  tags                TaggedRepository[]

  @@unique([id, repository_id])
}

model SponsoredRepository {
  id            String @id @default(cuid())
  repository_id String @unique
  sponsor_id    String

  repository Repository @relation(fields: [repository_id], references: [repository_id], onDelete: Cascade)
  sponsor    Sponsor    @relation(fields: [sponsor_id], references: [id], onDelete: Cascade)

  @@unique([id])
}

model RepositoryStatus {
  id            String     @id @default(cuid())
  repository_id String     @unique
  invalid       Boolean
  reason        String?    @db.Text
  reviewed      Boolean    @default(false)
  reviewed_by   String?
  Repository    Repository @relation(fields: [repository_id], references: [repository_id], onDelete: Cascade)
  user          User?      @relation(fields: [reviewed_by], references: [id], onDelete: Cascade)

  @@unique([id, repository_id])
}

model RepositoryCache {
  id             String     @id @default(cuid())
  repository_id  String     @unique
  name           String
  owner          String
  ownerHtmlUrl   String
  ownerAvatarUrl String
  url            String
  description    String?    @db.Text
  stars          Int
  openIssues     Int
  updatedAt      DateTime   @default(now())
  languageName   String?
  language       Language?  @relation(fields: [languageName], references: [name])
  license        String?    @db.Text
  Repository     Repository @relation(fields: [repository_id], references: [repository_id], onDelete: Cascade)

  @@unique([id, repository_id])
}

model PullRequest {
  id                String             @id @default(cuid())
  pr_id             BigInt                @unique
  html_url          String
  number            Int
  state             String
  title             String             @db.Text
  author            String
  author_id         String
  created_at        DateTime
  owner             String
  owner_id          String
  owner_avatar_url  String             @db.Text
  repository_id     String
  merged            Boolean
  PullRequestStatus PullRequestStatus?
  Repository        Repository         @relation(fields: [repository_id], references: [repository_id], onDelete: Cascade)

  @@unique([id, pr_id])
}

model PullRequestStatus {
  id          String      @id @default(cuid())
  pr_id       BigInt         @unique
  invalid     Boolean
  reason      String?     @db.Text
  reviewed    Boolean     @default(false)
  reviewed_by String?
  PullRequest PullRequest @relation(fields: [pr_id], references: [pr_id], onDelete: Cascade)
  user        User?       @relation(fields: [reviewed_by], references: [id], onDelete: Cascade)

  @@unique([id, pr_id])
}

model Language {
  name            String            @id
  color           String?           @db.Text
  RepositoryCache RepositoryCache[]
}

model Tag {
  name             String             @id
  TaggedRepository TaggedRepository[]
}

model TaggedRepository {
  tag_name      String
  repository_id String
  Tag           Tag        @relation(fields: [tag_name], references: [name], onDelete: Cascade)
  Repository    Repository @relation(fields: [repository_id], references: [id], onDelete: Cascade)

  @@id([tag_name, repository_id])
}

model Reward {
  id          String  @id @default(cuid())
  title       String  @db.Text
  summary     String  @db.LongText
  description String  @db.LongText
  redeem_info String?  @db.LongText
  logo_url    String  @db.Text
  banner_url  String  @db.Text
  digital     Boolean
  sponsor_id  String
  required_prs Int @default(4)

  sponsor             Sponsor               @relation(fields: [sponsor_id], references: [id], onDelete: Cascade)
  DigitalRewardCodes  DigitalRewardCodes[]
  PhysicalRewardClaim PhysicalRewardClaim[]
}

model DigitalRewardCodes {
  id          String               @id @default(cuid())
  reward_id   String
  code        String               @db.LongText
  reward      Reward               @relation(fields: [reward_id], references: [id], onDelete: Cascade)
  ClaimedCode DigitalRewardClaim?
}

model DigitalRewardClaim {
  code_id    String @unique
  claimer_id String

  code    DigitalRewardCodes @relation(fields: [code_id], references: [id], onDelete: Cascade)
  claimer User               @relation(fields: [claimer_id], references: [id], onDelete: Cascade)

  @@id([code_id, claimer_id])
}

model PhysicalRewardClaim {
  id         String  @id @default(cuid())
  reward_id  String
  claimer_id String
  firstName  String
  lastName   String
  address1   String
  address2   String?
  city       String
  zip        String
  state      String
  country    String
  email      String
  phoneNumber String?

  reward  Reward @relation(fields: [reward_id], references: [id], onDelete: Cascade)
  claimer User   @relation(fields: [claimer_id], references: [id], onDelete: Cascade)
}

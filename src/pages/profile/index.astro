---
import PageTitle from "@components/ui/PageTitle.astro";
import Layout from "@layouts/Layout.astro";
import prisma from "@lib/db";
import PullRequest from "../../components/ui/profile/PullRequest.astro"
import type { PullRequest as PR, Reward as RewardType} from "../../lib/types";
import Reward from "../../components/ui/rewards/Reward.astro";

const user = Astro.locals.user;
if (!user) {
    return Astro.redirect("/auth/github?url=/admin")
}

const rewards: RewardType[] = (await prisma.reward.findMany({
    select: {
        id: true,
        title: true,
        summary: true,
        description: true,
        redeem_info: true,
        logo_url: true,
        banner_url: true,
        digital: true,
        required_prs: true,
        sponsor: {
            select: {
                name: true,
                image_url: true,
            }
        },
        DigitalRewardCodes: {
            select: {
                id: true,
                code: true
            },
            where: {
                ClaimedCode: {
                    is: {
                        claimer_id: user.id
                    }
                }
            }
        },
        PhysicalRewardClaim: {
            select: {
                id: true,
                reward_id: true,
                firstName: true,
                lastName: true,
                address1: true,
                address2: true,
                city: true,
                zip: true,
                state: true,
                country: true,
                email: true,
                phoneNumber: true
            },
            where: {
                claimer: {
                    id: user.id
                }
            }
        }
    },
})).map<RewardType>(reward => {
    const {DigitalRewardCodes, PhysicalRewardClaim, ...baseReward} = reward
    return {
        ...baseReward,
        digitalRewardCode: DigitalRewardCodes ? DigitalRewardCodes[0] : undefined,
        physicalRewardClaim: PhysicalRewardClaim ? PhysicalRewardClaim[0] : undefined
    }
})

const prs: PR[] = (await prisma.pullRequest.findMany({
    select: {
        html_url: true,
        created_at: true,
        merged: true,
        number: true,
        owner_avatar_url: true,
        repository_id: true,
        pr_id: true,
        title: true,
        state: true,
        owner: true,
        draft: true,
        PullRequestStatus: {
            select: {
                invalid: true,
                reason: true,
                reviewed: true
            }
        },
        Repository: {
            select: {
                cache: {
                    select: {
                        name: true
                    }
                }
            }
        }
    },
    where: {
        author_id: `${user.githubId}`,
    }
})).map(pr => {
    return {
        pr_id: 0,
        author: "",
        created_at: new Date(pr.created_at).getTime(),
        html_url: pr.html_url,
        merged: pr.merged,
        number: pr.number,
        owner: pr.owner,
        owner_avatar_url: pr.owner_avatar_url,
        repo_name: (pr.Repository.cache || {name: ""}).name,
        title: pr.title,
        state: pr.state,
        reviewed: pr.PullRequestStatus?.reviewed || false,
        invalid: pr.PullRequestStatus?.invalid || false,
        reason: pr.PullRequestStatus?.reason || undefined,
        draft: pr.draft
    }
})

const validPrs = prs.filter(pr => pr.reviewed ? !pr.invalid : false);
---

<Layout title = "Profile" description = "Profile" canonical = "/profile">
    <div class = "mx-auto max-w-none">
        <PageTitle>
            <div class = "flex gap-x-2 place-items-center">
                <img src = {user.avatar} alt = {user.name} class = "rounded-full w-12 h-12">
                <p>{user.username}</p>
            </div>
        </PageTitle>

        <h2 class = "text-3xl text-center p-2 font-semibold font-brand my-4">Rewards</h2>
        <div class = "flex flex-col sm:flex-row gap-8 flex-wrap w-full pt-2 justify-between">
            {rewards.map(reward =>
                    <Reward reward = {reward} validPrs = {validPrs.length}/>)}
        </div>
        <h2 class = "text-3xl text-center p-2 font-semibold font-brand my-4">Pull Requests</h2>

        <div class = "flex flex-wrap gap-4 justify-center">
            {prs.map(pr =>
                    <PullRequest pr = {pr}/>)}
        </div>

    </div>
</Layout>

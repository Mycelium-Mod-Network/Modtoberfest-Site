---
import Layout from "@layouts/Layout.astro";
import prisma from "../../lib/db";
import Repository from "@components/ui/repositories/Repository.astro";
import type {DisplayRepository} from "@lib/types";
import {shuffleArray} from "../../lib/util";

let sponsoredCount = 0;

const now = new Date();

const MILLISECONDS_PER_DAY = 24 * 60 * 60 * 1000;
const DATE_FILTERS = [
    {display: "7 Days", id: "7d", date: now.getTime() - MILLISECONDS_PER_DAY * 7},
    {display: "30 Days", id: "30d", date: now.getTime() - MILLISECONDS_PER_DAY * 30},
    {display: "90 Days", id: "90d", date: now.getTime() - MILLISECONDS_PER_DAY * 90},
    {display: "180 Days", id: "180d", date: now.getTime() - MILLISECONDS_PER_DAY * 180},
    {display: "1 Year", id: "1y", date: now.getTime() - MILLISECONDS_PER_DAY * 365},
    {display: "2 Years", id: "2y", date: now.getTime() - MILLISECONDS_PER_DAY * 730}];
const SORT_FILTERS = [
    "Random",
    "Recently Updated",
    "Most Stars",
    "Least Stars",
    "Most Issues",
    "Least Issues",
];
const url = Astro.url;

const selectedDate = url.searchParams.get("updated_within")
const selectedDateObj = new Date(DATE_FILTERS.find(x => x.id === selectedDate)?.date ?? 0);
const sortBy = url.searchParams.get("sort_by")
const selectedTag = url.searchParams.get("tag")
const tags = (await prisma.tag.findMany({
    select: {
        name: true
    }
})).map(tag => tag.name);
tags.sort()

const tagsFilter = selectedTag ? {
    some: {
        tag_name: selectedTag ?? undefined
    }
} : undefined;
const dbRepos: DisplayRepository[] = (await prisma.repository.findMany({
    select: {
        repository_id: true,
        SponsoredRepository: {
            select: {
                sponsor: {
                    select: {
                        name: true,
                        image_url: true
                    }
                }
            }
        },
        cache: {
            select: {
                name: true,
                owner: true,
                ownerHtmlUrl: true,
                ownerAvatarUrl: true,
                url: true,
                description: true,
                stars: true,
                openIssues: true,
                updatedAt: true,
                license: true,
                language: true
            }
        },
        tags: true
    },
    where: {
        tags: tagsFilter,
        cache: {
            updatedAt: {
                gt: selectedDateObj
            }
        },
        RepositoryStatus: {
            reviewed: true,
            invalid: false
        }
    },
})).reduce<DisplayRepository[]>((repos, repo) => {

    if (repo.cache) {

        repos.push({
            repository_id: repo.repository_id,
            name: repo.cache.name,
            owner: repo.cache.owner,
            description: repo.cache.description ?? undefined,
            openIssues: repo.cache.openIssues,
            ownerAvatarUrl: repo.cache.ownerAvatarUrl,
            ownerHtmlUrl: repo.cache.ownerHtmlUrl,
            sponsor: (repo.SponsoredRepository && {
                name: repo.SponsoredRepository.sponsor.name,
                image_url: repo.SponsoredRepository.sponsor.image_url,
            }) || undefined,
            stars: repo.cache.stars,
            updatedAt: repo.cache.updatedAt.getTime(),
            url: repo.cache.url,
            license: repo.cache.license,
            language: repo.cache.language,
            tags: (repo.tags ?? []).map(tag => tag.tag_name),
        });

    }
    return repos;
}, [])

dbRepos.sort((a, b) => {
    if (sortBy == "Most Stars") return a.stars - b.stars
    else if (sortBy == "Most Stars") return b.stars - a.stars
    else if (sortBy == "Least Stars") return b.stars - a.stars
    else if (sortBy == "Most Issues") return a.openIssues - b.openIssues
    else if (sortBy == "Least Issues") return b.openIssues - a.openIssues
    else if (sortBy == "Recently Updated") return a.updatedAt - b.updatedAt
    else return 0.5 - Math.random()
})

const repos = dbRepos.reduce<DisplayRepository[]>((acc, cur) => {
    if (cur.sponsor && sponsoredCount++ < 8) {
        return [cur, ...acc]
    }
    return [...acc, cur]
}, [])
const user = Astro.locals.user;
---
<Layout title = "Repositories" description = "Repositories" canonical = "/repositories" currentPage = "repositories" wide = {true}>
    <div class = "mx-auto">
        <h1 class:list = {["text-white text-3xl font-semibold font-brand border-b-2 tracking-wide mb-4 pb-4 font-brand", {"flex justify-between": user}]}>
            <span>Repositories</span>

            {user && <a href = "/repositories/submit" class = "no-underline">
                <button class = "px-4 border border-primary rounded-md text-lg font-bold shadow-sm bg-primary text-black animate-sm-glow hover:bg-secondary hover:border-secondary  transition-colors">Submit</button>
            </a>}
        </h1>
        <div class = "flex flex-col sm:flex-row gap-4">

            <div class = "flex gap-x-2">
                <label for = "tags">Tags:</label>

                <select id = "tags" name = "tags" class = "bg-transparent focus:bg-primary/10 outline outline-white/10 focus:outline-primary w-full sm:w-auto">
                    <option label = "All"></option>
                    {tags.map((tag) =>
                            <option value = {tag} class = "text-black" selected = {selectedTag === tag}>{tag}</option>
                    )}
                </select>
            </div>

            <div class = "flex gap-x-2">
                <label for = "updated_within" class="flex-none">Updated Within:</label>

                <select id = "updated_within" name = "updated_within" class = "bg-transparent focus:bg-primary/10 outline outline-white/10 focus:outline-primary w-full sm:w-auto">
                    <option label = "Any"></option>
                    {DATE_FILTERS.map(date =>
                            <option value = {date.id} class = "text-black" selected = {selectedDate === date.id}>{date.display}</option>)}
                </select>
            </div>
            <div class = "flex gap-x-2">
                <label for = "sort_by" class="flex-none">Sort By:</label>

                <select id = "sort_by" name = "sort_by" class = "bg-transparent focus:bg-primary/10 outline outline-white/10 focus:outline-primary w-full sm:w-auto">
                    {SORT_FILTERS.map(sort =>
                            <option value = {sort} class = "text-black" selected = {sortBy === sort}>{sort}</option>)}
                </select>
            </div>
        </div>
        <div class = "flex flex-col sm:flex-row gap-8 flex-wrap mt-6 w-full justify-center">
            {repos.map((repo) =>
                    <>
                        <Repository repo = {repo}/>
                    </>)}
        </div>

    </div>

    <script>
        const tags = document.getElementById("tags")!;
        const updatedWithin = document.getElementById("updated_within")!;
        const sortBy = document.getElementById("sort_by")!;
        const url = new URL(window.location as unknown as string) ;
        tags.addEventListener("change", async (e) => {
            e.preventDefault();
            const select = e.target as HTMLSelectElement

            if (select.value) {
                url.searchParams.set("tag", select.value);
            } else {
                url.searchParams.delete("tag");
            }
            window.location = url as unknown as Location;
        })

        updatedWithin.addEventListener("change", async (e) => {
            e.preventDefault();
            const select = e.target as HTMLSelectElement

            if (select.value) {
                url.searchParams.set("updated_within", select.value);
            } else {
                url.searchParams.delete("updated_within");
            }
            window.location = url as unknown as Location;
        })

        sortBy.addEventListener("change", async (e) => {
            e.preventDefault();
            const select = e.target as HTMLSelectElement

            if (select.value) {
                url.searchParams.set("sort_by", select.value);
            } else {
                url.searchParams.delete("sort_by");
            }
            window.location = url as unknown as Location;
        })
    </script>
</Layout>
